
//https://leetcode.com/problems/search-a-2d-matrix-ii/
// Time Complexity :O(m*n)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :Yes
// Three line explanation of solution in plain english

// Your code here along with comments explaining your approach


class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix == null || matrix.length ==0) return false;
        
        int m = matrix.length;
        int n = matrix[0].length;
        //start from last diagonal element
        int i =m-1,j=0;
    while(i>=0 && i<=m-1 && j>=0 && j<=n-1)
    {
        if(target == matrix[i][j])
        {
            return true;
        }
        else if(target> matrix[i][j])
        {
            j++;
        }
       else if(target < matrix[i][j])
        {
            i--;
        }
    }
        return false;
    }
}