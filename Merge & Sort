Approach 1 : Merge & Sort
Time Complexity : O(m+n)+O(m+nlog(n))
Space Complexity : O(1) ---> No Additional Space required
class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        nums1[:m+n]=sorted(nums1[:m]+nums2)
 
 
 Approach 2 : Create a new Array. Add the elements into it by comparing them
Time Complexity : O(m+n)+
Space Complexity : O(m+n)

Approach 3 : Two Pointer Approach starting at the begining
Time Complexity :O(n+m)
Space Complexity: O(n+m)
class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        p1=m-1
        p2=n-1
        p=m+n-1
        while (p1>=0 and p2>=0):
            if nums1[p1]<nums2[p2]:
                nums1[p]=nums2[p2]
                p2-=1
            else:
                nums1[p]=nums1[p1]
                p1-=1
            p-=1
        
        nums1[:p2+1]=nums2[:p2+1] ### Adding Missing Elements from nums2

 
