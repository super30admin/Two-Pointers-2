// Time Complexity : o(n )
// Space Complexity : o(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no


// Your code here along with comments explaining your approach
/*
* Use three pointers.
* 1. Pointing to m-1 (end of nums1)
* 2. Pointing to n-1 (end of nums2)
* 3. Pointing to the index where we to need to put the result number
* Put the max of nums at ptr1 and ptr2 at index ptr3 and update the corresponding pointers
* */

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int ptr1 = m-1;
        int ptr2 = n-1;
        int idx = nums1.length -1;
        while(ptr1 >=0 && ptr2 >=0){
            if(nums1[ptr1] >= nums2[ptr2]){
                nums1[idx] = nums1[ptr1];
                ptr1--;
                idx --;
            } else {
                nums1[idx] = nums2[ptr2];
                ptr2--;
                idx--;
            }
        }

        while(ptr2>=0){
            nums1[idx--] = nums2[ptr2--];
        }
    }
}