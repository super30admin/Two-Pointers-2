// Time Complexity :O(n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode :yes
// Three line explanation of solution in plain english
when nums1 is null and nums2 has value
// Your code here along with comments explaining your approach
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int p1 = m-1; 
        int p2 = n-1;
        int index = m + n -1;


        if(nums1 == null || nums1.length == 0)
            return;

            while(p1>=0 && p2>=0)
            {

                //p1 is greater
                if(nums1[p1]>nums2[p2])
                {
                    nums1[index] = nums1[p1];
                    p1--;
                }
                else
                {
                    nums1[index] = nums2[p2];
                    p2--;
                }
                 index --;   
            }

        while(p2>=0)
        {
            nums1[index] = nums2[p2];
            p2--;
            index--;
        }
    }
}
