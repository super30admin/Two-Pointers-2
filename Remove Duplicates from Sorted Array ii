// Time Complexity : O(N)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Three line explanation of solution in plain english: Idea is to use two pointers and make decision based on the count of current val.
//If count>2-> start shifting to the left else reset count for new element.

// Your code here along with comments explaining your approach

SOLUTION:
class Solution {
    public int removeDuplicates(int[] nums) {
        if(nums==null || nums.length==0){
            return 0;
        }
        
        int curr = 1, count = 1;       
        for(int i = 1 ; i < nums.length ; i++){
            if(nums[i]==nums[i-1]){
                if(count<2){
                    // curr++;
                    nums[curr] = nums[i];  
                    curr++;
                }
                    count++;  
            }else{
                count = 1;
                // curr++;
                nums[curr] = nums[i];
                curr++;       
            }
        }
        return curr;
    }
}
