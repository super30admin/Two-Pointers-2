//Time Complexity : O(n)
//Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes



class Solution 
{
    public boolean searchMatrix(int[][] matrix, int target) 
    {
//         int n = matrix.length;
//         int m = matrix[0].length;
//         for(int i=0;i<matrix.length;i++)
//         {
             
//             if(target>=matrix[i][0] && target<=matrix[i][m-1])
//             {
//                  if(bs(matrix, i, m, target) == true)
//                  {
//                      return true;
//                  }
//             }
//         }
        
       
//         return false;
//     }
    
    
//     public static boolean bs(int[][] matrix, int i, int m, int target)
//     {
//         // System.out.println(i);
//         int low = 0;
//         int high = m- 1;
//         while(low <= high)
//         {
//             int mid = low + (high-low)/2;
//             if(target == matrix[i][mid])
//             {
//                 return true;
//             }else if(target > matrix[i][mid])
//             {
//                 low = mid+1;
//             }else
//             {
//                 high = mid -1;
//             }
//         }
        
//         return false;
//     }
     
        int r=matrix.length-1;
        int c = 0;
        while(r >= 0 && c<=matrix[0].length-1)
        {
            //System.out.println(r+" "+c);
            if(target == matrix[r][c])
            {
                return true;
            }
            else if(matrix[r][c]>target)
            {
                r--;
            }else if(matrix[r][c]<target)
            {
                c++;
            }
        }
        
        return false;
        
        
        
    }
}