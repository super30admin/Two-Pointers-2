Approach 1 : Brute Force Approach . Iterate through the matrix and search for the target. Linear search.
Time Complexity :O(mn)
Space Complexity :O(1)
Approach 2 : Iterate through the row and do a binary search on every row 
Time complexity :m*log(n)
Space complexity : O(1)
Approach 3 : Consider the diagonal elements and compare the target and move accordingly
Time complexity :O(n+m)
Space Complexity :O(1)
class Solution:
    def searchMatrix(self, matrix, target):
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """
        if (len(matrix)==0): ## Edge case
            return False
        m=len(matrix) ### No of rows
        n=len(matrix[0])
        i,j=0,n-1 ## Upper right corner as pointer to start
        while(i<m and j>=0): ### To stay within the matrix
            #case 1 if the element is target
            if (matrix[i][j]==target):
                return True
            elif matrix[i][j]>target:
                j-=1    
            else:
                i+=1
        return False

