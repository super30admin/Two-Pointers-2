// Time Complexity : check below
// Space Complexity :check below
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no

Solution - Considering 2d as 1d array and finding mid the getting indexes of that mid in 2darray and applying binary search
          TC - O(log(m * n)) = O(log m) + O(log n)   where m - row size, n - col size of matrix
          SC - O(1)

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix == null || matrix.length == 0)
            return false;
        
        int m = matrix.length, n = matrix[0].length;
        int low = 0, high = m * n - 1;
        
        while(low <= high)
        {
            int mid = low + (high - low)/2;
            int row = mid / n;
            int col = mid % n;
            
            if(matrix[row][col] == target)
                return true;
            else if (target > matrix[row][col])
            {
                low = mid + 1;
            }
            else
            {
                high = mid - 1;
            }
        }
        return false;
    }
}
