// Time Complexity : o(n )
// Space Complexity : o(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no


// Your code here along with comments explaining your approach
/*
* Use 2 pointers.
* 1. One ptr (i) to traverse the array and get the frequency of numbers
* 2. Second ptr (idx)telling where the next number should be placed.
* Keep a count of nums while traverse the array
* if the count exceeds then just go to next iteration
* if the count is less than allowed duplicates , put the number at ptr2
* */

class Solution {
    public int removeDuplicates(int[] nums) {
        int idx = 0;
        int k = 2;
        int count = 0;
        for(int i = 0; i < nums.length; i++){
            if(i > 0 && nums[i] == nums[i-1]){
                count++;
            } else {
                count = 1;
            }
            if(count<=k){
                nums[idx] = nums[i];
                idx++;
            }
        }
        return idx;
    }
}