//Time Complexity : O(n)
//Space Complexity : O(n)
// Did this code successfully run on Leetcode : Yes



class Solution 
{
    public void merge(int[] nums1, int m, int[] nums2, int n) 
    {
//         int[] arr1 = new int[m+1];
        
//         for(int i=0;i<m;i++)
//         {
//             arr1[i] = nums1[i];
//         }
//         arr1[m] = Integer.MAX_VALUE;
        
//         int[] arr2 = new int[n+1];
        
//         for(int i=0;i<n;i++)
//         {
//             arr2[i] = nums2[i];
//         }
//         arr2[n] = Integer.MAX_VALUE;
        
        
//         int i=0;
//         int j=0;
//         for(int k=0;k<nums1.length;k++)
//         {
//             if(arr1[i]<=arr2[j])
//             {
//                 nums1[k] = arr1[i];
//                 i++;
//             }else
//             {
//                 nums1[k] = arr2[j];
//                 j++;
//             }
//         }
        
        int[] arr1 = new int[m];
        
        for(int i=0;i<m;i++)
        {
            arr1[i] = nums1[i];
        }
        
        
        
        int i=0;
        int j=0;
        int h = 0;
        while(i<m && j<n)
        {
            if(arr1[i]<=nums2[j])
            {
                nums1[h] = arr1[i];
                i++;
            }else
            {
                nums1[h] = nums2[j];
                j++;
            }
            h++;
        }
        
        while(i<m)
        {
            nums1[h] = arr1[i];
            h++;
            i++;
        }
        while(j<n)
        {
            nums1[h] = nums2[j];
            h++;
            j++;
        }
    }
}