# // Time Complexity : O(n)
# // Space Complexity : O(1)
# // Did this code successfully run on Leetcode : Yes

class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        if not nums or len(nums)==0: return 0
        slow=0
        count=1 #count is 1 because we are comapring current num with previous, if not equal count is 1 by default
        k=2
        for fast in range(len(nums)):
            if fast>0 and nums[fast]==nums[fast-1]: #get count 
                count+=1
            else:
                count=1

            if count<=k: #the moment count<=k overwrite nums[slow] with nums[fast] and increase slow
                nums[slow]=nums[fast]
                slow+=1
        return slow